<!doctype html>
<html lang="ja">
<head>
<meta charset="utf-8">
<title>データ量特化QR生成(Base64出力版)</title>
<style>
body{font-family:system-ui,Arial;padding:12px}
textarea{width:100%;height:60px;margin-bottom:6px}
select,button{margin:4px 0}
img{border:1px solid #ccc; image-rendering:pixelated; display:block; margin-top:8px;}
#base64output{width:100%;height:120px;margin-top:6px;}
</style>
</head>
<body>
<textarea id="text">test</textarea>
<select id="ec">
<option value="L">L (7%)</option>
<option value="M">M (15%)</option>
<option value="Q">Q (25%)</option>
<option value="H">H (30%)</option>
</select>
<button id="gen">生成</button>
<img id="preview" alt="QR Preview">
<textarea id="base64output" readonly placeholder="ここにBase64文字列が出力されます"></textarea>

<script src="https://cdn.jsdelivr.net/npm/qrcode-generator@1.4.4/qrcode.js"></script>
<script src="https://cdn.jsdelivr.net/npm/pako@2.1.0/dist/pako.min.js"></script>

<script>
function detectMode(text){
  if(/^[0-9]*$/.test(text)) return 'Numeric';
  if(/^[0-9A-Z $%*+\-./:]*$/.test(text)) return 'Alphanumeric';
  return 'Byte';
}

// CRC32計算
function crc32(buf){
  const t=new Uint32Array(256); for(let n=0;n<256;n++){let c=n;for(let k=0;k<8;k++)c=(c&1)?(0xEDB88320^(c>>>1)):(c>>>1);t[n]=c>>>0;}
  let c=0xFFFFFFFF; for(let i=0;i<buf.length;i++) c=(c>>>8)^t[(c^buf[i])&0xFF]; return (c^0xFFFFFFFF)>>>0;
}
function makeChunk(type,data){
  const t=new TextEncoder().encode(type);
  const len=new Uint8Array(4); new DataView(len.buffer).setUint32(0,data.length);
  const crcArr=new Uint8Array(4); new DataView(crcArr.buffer).setUint32(0,crc32(new Uint8Array([...t,...data])));
  return new Uint8Array([...len,...t,...data,...crcArr]);
}

// QR→Bitmap
function qrToBitmap(q){
  const n=q.getModuleCount(),pad=2,W=n+pad*2,H=W;
  const out=[];
  for(let y=0;y<H;y++){
    const row=new Uint8Array(W);
    for(let x=0;x<W;x++)
      row[x]=(x>=pad&&x<pad+n&&y>=pad&&y<pad+n?q.isDark(y-pad,x-pad)?1:0:0);
    out.push(row);
  }
  return out;
}

// Bitmap→PNG
function packScanlines(bitmap){
  const h=bitmap.length,w=bitmap[0].length,bytesPerRow=Math.ceil(w/8);
  const out=new Uint8Array((1+bytesPerRow)*h);
  let p=0;
  for(let y=0;y<h;y++){
    out[p++]=0;
    let bitPos=7,cur=0;
    for(let x=0;x<w;x++){
      cur|=(bitmap[y][x]?1:0)<<bitPos; bitPos--;
      if(bitPos<0){ out[p++]=cur; cur=0; bitPos=7; }
    }
    if(bitPos!==7) out[p++]=cur;
  }
  return out.subarray(0,p);
}

async function bitmapToPng(bitmap){
  const W=bitmap[0].length,H=bitmap.length;
  const raw=packScanlines(bitmap);
  const z=pako.deflate(raw,{level:9});
  const sig=new Uint8Array([137,80,78,71,13,10,26,10]);
  const ihdr=new Uint8Array(13);
  const dv=new DataView(ihdr.buffer);
  dv.setUint32(0,W); dv.setUint32(4,H);
  ihdr[8]=1;ihdr[9]=3;ihdr[10]=0;ihdr[11]=0;ihdr[12]=0;
  return new Uint8Array([...sig,
    ...makeChunk('IHDR',ihdr),
    ...makeChunk('PLTE',new Uint8Array([255,255,255,0,0,0])),
    ...makeChunk('IDAT',z),
    ...makeChunk('IEND',new Uint8Array(0))]);
}

function selectVersion(text,mode,ec){
  for(let v=2;v<=40;v++){
    const q=qrcode(v,ec); q.addData(text,mode==='Byte'?'Byte':mode);
    try{q.make(); return v;}catch(e){continue;}
  }
  return 40;
}

document.getElementById('gen').onclick=async()=>{
  const text=document.getElementById('text').value;
  const ec=document.getElementById('ec').value;
  const mode=detectMode(text);
  const ver=selectVersion(text,mode,ec);
  const q=qrcode(ver,ec); q.addData(text,mode==='Byte'?'Byte':mode); q.make();
  const bm=qrToBitmap(q);
  const png=await bitmapToPng(bm);
  const b64= btoa(String.fromCharCode(...png));
  document.getElementById('preview').src="data:image/png;base64,"+b64;
  document.getElementById('base64output').value=b64;
};
</script>
</body>
</html>
